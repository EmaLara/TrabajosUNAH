/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chatema;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import javax.swing.JOptionPane;

/**
 *
 * @author LAB02PC1
 */
public class Cliente extends javax.swing.JFrame {
 
    /**
     * Creates new form Cliente
     */
    public Cliente() {
        initComponents();
        conectarAServidor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtrecibe = new javax.swing.JTextArea();
        txtenviar = new javax.swing.JTextField();
        btnenviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtrecibe.setColumns(20);
        txtrecibe.setRows(5);
        txtrecibe.setEditable(false);
        jScrollPane1.setViewportView(txtrecibe);

        txtenviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtenviarActionPerformed(evt);
            }
        });
        txtenviar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtenviarKeyPressed(evt);
            }
        });

        btnenviar.setText("Enviar");
        btnenviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnenviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtenviar)
                        .addGap(18, 18, 18)
                        .addComponent(btnenviar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtenviar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnenviar))
                .addGap(28, 28, 28))
        );

        setSize(new java.awt.Dimension(416, 458));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Agregar un atributo para la conexión al servidor
    private Socket socket;

    // Agregar un método para conectarse al servidor
    private void conectarAServidor() {
        try {
            // Pedir al usuario que ingrese su nombre
            String clientName = JOptionPane.showInputDialog(null, "Ingresa tu nombre:");

            // Pedir al usuario que ingrese la dirección IP del servidor
            String serverAddress = JOptionPane.showInputDialog(null, "Ingresa la dirección IP del servidor:");

            // Establecer la conexión al servidor
            socket = new Socket(serverAddress, 1234);

            // Enviar el nombre al servidor como el primer mensaje
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
            out.println(clientName);

            // Iniciar un hilo para escuchar los mensajes del servidor
            new Thread(() -> {
                try {
                    BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String mensaje;
                    while ((mensaje = in.readLine()) != null) {
                        // Agregar el mensaje recibido al campo txtrecibe
                        txtrecibe.append(mensaje + "\n");
                    }
                } catch (IOException e) {
                    // Manejar el error
                }
            }).start();
        } catch (IOException e) {
            // Manejar el error
        }
    }


    private void enviarMensaje() {
        // Obtener el mensaje a enviar desde el campo txtenviar
        String mensaje = txtenviar.getText();

        try {
            // Enviar el mensaje al servidor
            OutputStream outputStream = socket.getOutputStream();
            PrintWriter writer = new PrintWriter(outputStream, true);
            writer.println(mensaje);
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        // Agregar el mensaje al campo txtrecibe
        txtrecibe.append("Yo: " + mensaje + "\n");

        // Limpiar el campo txtenviar
        txtenviar.setText("");
    }
    
    private void txtenviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtenviarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtenviarActionPerformed

    private void btnenviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnenviarActionPerformed
        enviarMensaje();
    }//GEN-LAST:event_btnenviarActionPerformed

    private void txtenviarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtenviarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            enviarMensaje();
        }
    }//GEN-LAST:event_txtenviarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnenviar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtenviar;
    private javax.swing.JTextArea txtrecibe;
    // End of variables declaration//GEN-END:variables
}
